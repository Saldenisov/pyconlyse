const int pulPin = 13;
const int dirPin = 12;
const int enblPin = 11;
long microstep = 16;
int delay_time = 28;
// in steps
float go_pos = 0;
float pos = 0;
float delta = 0.0;
int res = 0;

const int max_size_cmd = 32;
char buf[max_size_cmd];
String str_object = "";
// false corrsponds to ABS, True to RELATIVE
bool move_type = false;

//310 turns in delay line in the long one
// 128 - 1 (better 2)

// 16 - 20 (30)
//8 - 40 (50)
//4 - 80 (100)
//2 - 180 (200)


//max full steps is 62900
const long max_full_steps = 62900;

void setup() {
  // put your setup code here, to run once:
  pinMode(pulPin, OUTPUT);
  pinMode(dirPin, OUTPUT);
  pinMode(enblPin, OUTPUT);

  digitalWrite(pulPin, LOW);
  digitalWrite(enblPin, LOW);
  digitalWrite(dirPin, LOW);


  digitalWrite(enblPin, HIGH);
  delay(100);
  digitalWrite(enblPin, LOW);

  Serial.begin(9600);
  Serial.println("init");
}


void set_dir(int dir){
  if (dir == 1){
    digitalWrite(dirPin, LOW);
  }
  else if (dir == -1){
    digitalWrite(dirPin, HIGH);
  }
}


float runit(float go_pos, bool move_type, float &pos){
  //setting direction of rotation
  if (move_type){ // If RELATIVE
    go_pos = go_pos + pos;
  }

  delta = go_pos - pos;

  if (delta != 0 & go_pos <= max_full_steps & go_pos >= 0){
    if (delta < 0){
      set_dir(-1);
    }
    else{
      set_dir(1);
    }
  long n_of_microsteps = long(abs(delta) * microstep);

  long pas = 0;
  while (pas < n_of_microsteps){
    digitalWrite(pulPin, HIGH);
    delayMicroseconds(delay_time);
    digitalWrite(pulPin, LOW);
    delayMicroseconds(delay_time);
    pas++;
  }
  pos = pos + delta;
  return 0;
  }
  else{
    return -1;
  }

}


int execute_cmd(String &cmd, float &pos)
{
  cmd.toCharArray(buf, sizeof(buf));
  char *str;
  char *p = buf;
  str_object = String(strtok(p, " "));
  p = NULL;
  if (str_object == "MOVE"){
      str_object = String(strtok(p, " "));
      if (str_object == "ABS"){
        move_type = false;
      }
      else if (str_object == "REL"){
        move_type = true;
      }
      else {
        res = -1;
      }
      str_object = String(strtok(p, " "));
      if (str_object != NULL){
        go_pos = str_object.toFloat();
        res = runit(go_pos, move_type, pos);
      }
      else{
        res = -1;
      }
       return res;
     }
  else if (str_object == "POS"){
    Serial.println(pos);
    return 0;
  }
  else if (str_object == "SET"){
    str_object = String(strtok(p, " "));
    if (str_object == "POS"){
      str_object = String(strtok(p, " "));
      if (str_object != NULL){
        pos = str_object.toFloat();
      }
      else{
        return -1;
      }
    }
      return 0;
  }
}



void loop() {

  if (Serial.available() > 0) {
    // read the incoming String, it is not string:
    str_object = Serial.readString();
    res = execute_cmd(str_object, pos);
    delay(200);
    //clean serial before receiving the next command
    Serial.flush();
  }
}