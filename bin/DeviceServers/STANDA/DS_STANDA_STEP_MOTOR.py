#!/usr/bin/env python
# -*- coding:utf-8 -*-


# ############################################################################
#  license :
# ============================================================================
#
#  File :        DS_STANDA_STEP_MOTOR.py
#
#  Project :     PYCONLYSE
#
# This file is part of Tango device class.
# 
# Tango is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Tango is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Tango.  If not, see <http://www.gnu.org/licenses/>.
# 
#
#  $Author :      sergey.denisov$
#
#  $Revision :    $
#
#  $Date :        $
#
#  $HeadUrl :     $
# ============================================================================
#            This file is generated by POGO
#     (Program Obviously used to Generate tango Object)
# ############################################################################

__all__ = ["DS_STANDA_STEP_MOTOR", "DS_STANDA_STEP_MOTORClass", "main"]

__docformat__ = 'restructuredtext'

import PyTango
import sys
# Add additional import
#----- PROTECTED REGION ID(DS_STANDA_STEP_MOTOR.additionnal_import) ENABLED START -----#
import ctypes
from ximc import (lib, arch_type, ximc_dir, EnumerateFlags, get_position_t, Result,
                  controller_name_t, status_t, set_position_t, PositionFlags)
from typing import Dict
from pathlib import Path
from time import sleep
from devices.service_devices.stepmotors.stpmtr_dataclass import StandaAxisStpMtr
#----- PROTECTED REGION END -----#	//	DS_STANDA_STEP_MOTOR.additionnal_import

# Device States Description
# ON : 
# OFF : 
# MOVING : 


class DS_STANDA_STEP_MOTOR (PyTango.Device_4Impl):
    """Controls the STANDA motorized equipment, e.g., step motros, DC motors.
    The DS is designed to work over ethernet only.
    
    Examples:
     - motoroized mirrors mounts
     - shutter DC
    
    The STANDA controller is a default controller:
    8SMC5-USB - Stepper & DC Motor Controller
    
    https://www.standa.lt/
    
    https://www.standa.lt/products/catalog/motorised_positioners?item=525&prod=stepper-dc-motor-controller"""
    
    # -------- Add you global variables here --------------------------
    #----- PROTECTED REGION ID(DS_STANDA_STEP_MOTOR.global_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	DS_STANDA_STEP_MOTOR.global_variables

    def __init__(self, cl, name):
        PyTango.Device_4Impl.__init__(self,cl,name)
        self.debug_stream("In __init__()")
        DS_STANDA_STEP_MOTOR.init_device(self)
        #----- PROTECTED REGION ID(DS_STANDA_STEP_MOTOR.__init__) ENABLED START -----#
        self.set_state(PyTango.DevState.OFF)
        #----- PROTECTED REGION END -----#	//	DS_STANDA_STEP_MOTOR.__init__
        
    def delete_device(self):
        self.debug_stream("In delete_device()")
        #----- PROTECTED REGION ID(DS_STANDA_STEP_MOTOR.delete_device) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	DS_STANDA_STEP_MOTOR.delete_device

    def init_device(self):
        self.debug_stream("In init_device()")
        self.get_device_properties(self.get_device_class())
        self.attr_position_read = 0.0
        self.attr_device_id_internal_read = 0
        self.attr_uri_read = ""
        #----- PROTECTED REGION ID(DS_STANDA_STEP_MOTOR.init_device) ENABLED START -----#
        self.lib = lib
        self.axis = StandaAxisStpMtr(device_id=self.device_property_list['device_id'][2],
                                     friendly_name=self.device_property_list['friendly_name'][2] ,
                                     ip_address=self.device_property_list['ip_address'][2])

        def find_device() -> int:
            self.info_stream(f"Searching for STANDA device {self.device_id}")
            self.lib.set_bindy_key(str(Path(ximc_dir / arch_type / "keyfile.sqlite")).encode("utf-8"))
            # Enumerate devices
            probe_flags = EnumerateFlags.ENUMERATE_PROBE + EnumerateFlags.ENUMERATE_NETWORK
            enum_hints = f"addr={self.ip_address}".encode('utf-8')
            # enum_hints = b"addr=" # Use this hint string for broadcast enumerate
            self.devenum = self.lib.enumerate_devices(probe_flags, enum_hints)
            device_counts = self.lib.get_device_count(self.devenum)
            sleep(0.05)
            argreturn = -1
            if device_counts > 0:
                for device_id_internal_seq in range(device_counts):
                    uri = self.lib.get_device_name(self.devenum, device_id_internal_seq)
                    sleep(0.01)
                    if self.device_id in uri.decode('utf-8'):
                        self.attr_uri_read = uri
                        return device_id_internal_seq
                return argreturn
            else:
                return argreturn

        self.attr_device_id_internal_read = find_device()
        if self.attr_device_id_internal_read == -1:
            self.info_stream(f"STANDA Device with ID {self.device_id} was NOT found.")
        else:
            self.info_stream(f"STANDA Device with ID {self.device_id} was found.")

        #----- PROTECTED REGION END -----#	//	DS_STANDA_STEP_MOTOR.init_device

    def always_executed_hook(self):
        self.debug_stream("In always_excuted_hook()")
        #----- PROTECTED REGION ID(DS_STANDA_STEP_MOTOR.always_executed_hook) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	DS_STANDA_STEP_MOTOR.always_executed_hook

    # -------------------------------------------------------------------------
    #    DS_STANDA_STEP_MOTOR read/write attribute methods
    # -------------------------------------------------------------------------
    
    def read_position(self, attr):
        self.debug_stream("In read_position()")
        #----- PROTECTED REGION ID(DS_STANDA_STEP_MOTOR.position_read) ENABLED START -----#
        pos = get_position_t()
        result = self.lib.get_position(self.attr_device_id_internal_read, ctypes.byref(pos))
        if result == Result.Ok:
            pos_microsteps = pos.Position * 256 + pos.uPosition
            pos_basic_units = axis.convert_to_basic_unit(MoveType.microstep, pos_microsteps)
            axis.position = pos_basic_units
            attr.set_value(self.attr_position_read)
        else:
            self.error_stream(f'Could not measure the positions of ')

        #----- PROTECTED REGION END -----#	//	DS_STANDA_STEP_MOTOR.position_read
        
    def read_device_id_internal(self, attr):
        self.debug_stream("In read_device_id_internal()")
        #----- PROTECTED REGION ID(DS_STANDA_STEP_MOTOR.device_id_internal_read) ENABLED START -----#
        attr.set_value(self.attr_device_id_internal_read)
        
        #----- PROTECTED REGION END -----#	//	DS_STANDA_STEP_MOTOR.device_id_internal_read
        
    def read_uri(self, attr):
        self.debug_stream("In read_uri()")
        #----- PROTECTED REGION ID(DS_STANDA_STEP_MOTOR.uri_read) ENABLED START -----#
        attr.set_value(self.attr_uri_read)
        
        #----- PROTECTED REGION END -----#	//	DS_STANDA_STEP_MOTOR.uri_read
        
    
    
            
    def read_attr_hardware(self, data):
        self.debug_stream("In read_attr_hardware()")
        #----- PROTECTED REGION ID(DS_STANDA_STEP_MOTOR.read_attr_hardware) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	DS_STANDA_STEP_MOTOR.read_attr_hardware


    # -------------------------------------------------------------------------
    #    DS_STANDA_STEP_MOTOR command methods
    # -------------------------------------------------------------------------
    
    def On(self):
        """ Turn-on hardware controller of STANDA
        :rtype: PyTango.DevBoolean
        """
        self.debug_stream("In On()")
        argout = False
        #----- PROTECTED REGION ID(DS_STANDA_STEP_MOTOR.On) ENABLED START -----#
        if self.lib.open_device(self.attr_uri_read) >= 0:
            argout = True
            self.set_state(PyTango.DevState.ON)
        else:
            self.set_state(PyTango.DevState.FAULT)
        #----- PROTECTED REGION END -----#	//	DS_STANDA_STEP_MOTOR.On
        return argout
        
    def is_On_allowed(self):
        self.debug_stream("In is_On_allowed()")
        state_ok = not(self.get_state() in [PyTango.DevState.ON,
            PyTango.DevState.MOVING])
        #----- PROTECTED REGION ID(DS_STANDA_STEP_MOTOR.is_On_allowed) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	DS_STANDA_STEP_MOTOR.is_On_allowed
        return state_ok
        
    def Move_abs(self, argin):
        """ Move
        :param argin: The URL of axis.
        :type argin: PyTango.DevFloat
        :return: Returns position of axis, when movement is finished
        :rtype: PyTango.DevFloat
        """
        self.debug_stream("In Move_abs()")
        argout = 0.0
        #----- PROTECTED REGION ID(DS_STANDA_STEP_MOTOR.Move_abs) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	DS_STANDA_STEP_MOTOR.Move_abs
        return argout
        
    def is_Move_abs_allowed(self):
        self.debug_stream("In is_Move_abs_allowed()")
        state_ok = not(self.get_state() in [PyTango.DevState.OFF,
            PyTango.DevState.MOVING])
        #----- PROTECTED REGION ID(DS_STANDA_STEP_MOTOR.is_Move_abs_allowed) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	DS_STANDA_STEP_MOTOR.is_Move_abs_allowed
        return state_ok
        
    def Stop(self):
        """ 
        :rtype: PyTango.DevBoolean
        """
        self.debug_stream("In Stop()")
        argout = False
        #----- PROTECTED REGION ID(DS_STANDA_STEP_MOTOR.Stop) ENABLED START -----#

        #----- PROTECTED REGION END -----#	//	DS_STANDA_STEP_MOTOR.Stop
        return argout
        
    def is_Stop_allowed(self):
        self.debug_stream("In is_Stop_allowed()")
        state_ok = not(self.get_state() in [PyTango.DevState.OFF])
        #----- PROTECTED REGION ID(DS_STANDA_STEP_MOTOR.is_Stop_allowed) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	DS_STANDA_STEP_MOTOR.is_Stop_allowed
        return state_ok
        
    def Move_rel(self, argin):
        """ Moves axis relatively to its position, and return position.
        :param argin: Position to go relatively to current position
        :type argin: PyTango.DevFloat
        :return: Position
        :rtype: PyTango.DevFloat
        """
        self.debug_stream("In Move_rel()")
        argout = 0.0
        #----- PROTECTED REGION ID(DS_STANDA_STEP_MOTOR.Move_rel) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	DS_STANDA_STEP_MOTOR.Move_rel
        return argout
        
    def is_Move_rel_allowed(self):
        self.debug_stream("In is_Move_rel_allowed()")
        state_ok = not(self.get_state() in [PyTango.DevState.OFF,
            PyTango.DevState.MOVING])
        #----- PROTECTED REGION ID(DS_STANDA_STEP_MOTOR.is_Move_rel_allowed) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	DS_STANDA_STEP_MOTOR.is_Move_rel_allowed
        return state_ok
        
    def Off(self):
        """ 
        :rtype: PyTango.DevBoolean
        """
        self.debug_stream("In Off()")
        argout = False
        #----- PROTECTED REGION ID(DS_STANDA_STEP_MOTOR.Off) ENABLED START -----#
        arg = ctypes.byref(ctypes.cast(self.attr_device_id_internal_read, ctypes.POINTER(ctypes.c_int)))
        result = self.lib.close_device(arg)
        argout = True
        self.set_state(PyTango.DevState.OFF)
        #----- PROTECTED REGION END -----#	//	DS_STANDA_STEP_MOTOR.Off
        return argout
        
    def is_Off_allowed(self):
        self.debug_stream("In is_Off_allowed()")
        state_ok = not(self.get_state() in [PyTango.DevState.OFF,
            PyTango.DevState.MOVING])
        #----- PROTECTED REGION ID(DS_STANDA_STEP_MOTOR.is_Off_allowed) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	DS_STANDA_STEP_MOTOR.is_Off_allowed
        return state_ok
        

    #----- PROTECTED REGION ID(DS_STANDA_STEP_MOTOR.programmer_methods) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	DS_STANDA_STEP_MOTOR.programmer_methods

class DS_STANDA_STEP_MOTORClass(PyTango.DeviceClass):
    # -------- Add you global class variables here --------------------------
    #----- PROTECTED REGION ID(DS_STANDA_STEP_MOTOR.global_class_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	DS_STANDA_STEP_MOTOR.global_class_variables


    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
        'ip_address':
            [PyTango.DevString, 
             '',
            [] ],
        'friendly_name':
            [PyTango.DevString, 
             '',
            [] ],
        'device_id':
            [PyTango.DevString, 
             '',
            [] ],
        'wait_movement':
            [PyTango.DevShort, 
            "Parameter that sets waiting time for axis to finish movement.",
            [3]],
        'basis_unit':
            [PyTango.DevString, 
            "class MoveType(Enum):\n    angle = `angle`\n    mm = `mm`\n    microstep = `microstep`\n    step = `step`",
            ["microstep"] ],
        'limits':
            [PyTango.DevVarFloatArray, 
            "limits of axis in basic units",
            [] ],
        'preset_values':
            [PyTango.DevVarFloatArray, 
             '',
            [] ],
        }


    #    Command definitions
    cmd_list = {
        'On':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevBoolean, "none"]],
        'Move_abs':
            [[PyTango.DevFloat, "The URL of axis."],
            [PyTango.DevFloat, "Returns position of axis, when movement is finished"]],
        'Stop':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevBoolean, "none"]],
        'Move_rel':
            [[PyTango.DevFloat, "Position to go relatively to current position"],
            [PyTango.DevFloat, "Position"]],
        'Off':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevBoolean, "none"]],
        }


    #    Attribute definitions
    attr_list = {
        'position':
            [[PyTango.DevFloat,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label': "axis_position",
                'unit': "step",
            } ],
        'device_id_internal':
            [[PyTango.DevUShort,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'description': "The STANDA dll enumerates the devices, so it is important to know the device`s number, that dll has given to it.",
                'Display level': PyTango.DispLevel.EXPERT,
            } ],
        'uri':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ]],
        }


def main():
    try:
        py = PyTango.Util(sys.argv)
        py.add_class(DS_STANDA_STEP_MOTORClass, DS_STANDA_STEP_MOTOR, 'DS_STANDA_STEP_MOTOR')
        #----- PROTECTED REGION ID(DS_STANDA_STEP_MOTOR.add_classes) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	DS_STANDA_STEP_MOTOR.add_classes

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed as e:
        print ('-------> Received a DevFailed exception:', e)
    except Exception as e:
        print ('-------> An unforeseen exception occured....', e)

if __name__ == '__main__':
    main()
