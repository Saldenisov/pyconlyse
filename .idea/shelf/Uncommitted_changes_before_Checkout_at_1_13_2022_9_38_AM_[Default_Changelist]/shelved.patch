Index: DeviceServers/STANDA/DS_STANDA_Widget.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from taurus.qt.qtgui.input import TaurusValueLineEdit, TaurusWheelEdit\r\nfrom taurus.qt.qtgui.button import TaurusCommandButton\r\nfrom taurus.qt.qtgui.display import TaurusLabel, TaurusLed\r\nfrom taurus import Device\r\nfrom taurus.external.qt import Qt\r\nfrom PyQt5 import QtWidgets, QtCore\r\nimport tango\r\n\r\nfrom PyQt5.QtGui import QMouseEvent\r\n\r\nfrom typing import List\r\nfrom _functools import partial\r\n\r\nfrom DeviceServers.DS_Widget import DS_General_Widget, VisType\r\nfrom gui.MyWidgets import MyQLabel\r\n\r\n\r\nclass Standa_motor(DS_General_Widget):\r\n\r\n    def __init__(self, device_name: str, parent=None, vis_type=VisType.FULL):\r\n        self.relative_shift = 1\r\n        super().__init__(device_name, parent, vis_type)\r\n        self.ds.subscribe_event(\"position\", tango.EventType.CHANGE_EVENT, self.position_listener)\r\n\r\n    def position_listener(self, event):\r\n        ds: Device = getattr(self, f'ds_{self.dev_name}')\r\n        p2: TaurusLabel = getattr(self, f'p2_{self.dev_name}')\r\n        p2.setText(str(ds.position))\r\n\r\n    def register_full_layouts(self):\r\n        super(Standa_motor, self).register_full_layouts()\r\n        setattr(self, f'layout_pos_{self.dev_name}', Qt.QHBoxLayout())\r\n        setattr(self, f'layout_preset_{self.dev_name}', Qt.QHBoxLayout())\r\n        setattr(self, f'layout_info_{self.dev_name}', Qt.QHBoxLayout())\r\n\r\n    def register_min_layouts(self):\r\n        super(Standa_motor, self).register_min_layouts()\r\n        setattr(self, f'layout_main_{self.dev_name}', Qt.QVBoxLayout())\r\n        setattr(self, f'layout_min_{self.dev_name}', Qt.QHBoxLayout())\r\n        setattr(self, f'layout_buttons_{self.dev_name}', Qt.QHBoxLayout())\r\n\r\n    def register_DS_full(self, dev_name, group_number=1):\r\n        dev_name = self.dev_name\r\n        super(Standa_motor, self).register_DS_full(dev_name, group_number=1)\r\n\r\n        ds: Device = getattr(self, f'ds_{self.dev_name}')\r\n\r\n        lo_group: Qt.QHBoxLayout = getattr(self, f'lo_group_{group_number}')\r\n        unit = ds.get_property('unit')['unit'][0]\r\n        setattr(self, f'l_min_{dev_name}', float(ds.get_property('limit_min')['limit_min'][0]))\r\n        setattr(self, f'l_max_{dev_name}', float(ds.get_property('limit_max')['limit_max'][0]))\r\n        setattr(self, f'name_{dev_name}', ds.get_property('friendly_name')['friendly_name'][0])\r\n        setattr(self, f'preset_pos_{dev_name}',\r\n                list([float(pos) for pos in ds.get_property('preset_pos')['preset_pos']]))\r\n        l_min, l_max = getattr(self, f'l_min_{dev_name}'), getattr(self, f'l_max_{dev_name}')\r\n        name = getattr(self, f'name_{dev_name}')\r\n\r\n        lo_device: Qt.QLayout = getattr(self, f'layout_main_{dev_name}')\r\n        lo_status: Qt.QLayout = getattr(self, f'layout_status_{dev_name}')\r\n        lo_pos: Qt.QLayout = getattr(self, f'layout_pos_{dev_name}')\r\n        lo_info: Qt.QLayout = getattr(self, f'layout_info_{dev_name}')\r\n        lo_error_info: Qt.QLayout = getattr(self, f'layout_error_info_{dev_name}')\r\n        lo_preset: Qt.QLayout = getattr(self, f'layout_preset_{dev_name}')\r\n        lo_buttons: Qt.QLayout = getattr(self, f'layout_buttons_{dev_name}')\r\n\r\n        # State and status\r\n        self.set_state_status(False)\r\n\r\n        # Position controls\r\n        widgets = [TaurusLabel(), TaurusLabel(), TaurusWheelEdit(), TaurusValueLineEdit(),\r\n                   MyQLabel(f'Relative shift: {self.relative_shift}')]\r\n        i = 1\r\n        for p in widgets:\r\n            name = f'p{i}_{dev_name}'\r\n            setattr(self, f'{name}', p)\r\n            i += 1\r\n        p1: TaurusLabel = getattr(self, f'p1_{dev_name}')\r\n        p2: TaurusLabel = getattr(self, f'p2_{dev_name}')\r\n        p3: TaurusWheelEdit = getattr(self, f'p3_{dev_name}')\r\n        p4: TaurusValueLineEdit = getattr(self, f'p{4}_{dev_name}')\r\n        p5: MyQLabel = getattr(self, f'p{5}_{dev_name}')\r\n\r\n        p5.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)\r\n        p5.customContextMenuRequested.connect(partial(self.context_menu))\r\n\r\n        limit = abs(l_min) if abs(l_min) >= abs(l_max) else abs(l_max)\r\n        n_digits = len(str(int(limit)))\r\n\r\n        lo_pos.addWidget(p1)\r\n        lo_pos.addWidget(p2)\r\n        lo_pos.addWidget(p3)\r\n        lo_pos.addWidget(p4)\r\n        lo_pos.addWidget(p5)\r\n\r\n        p1.setText(unit)\r\n        p2.model = f'{dev_name}/position'\r\n        p2.setFixedWidth(100)\r\n        p3.model = f'{dev_name}/position'\r\n\r\n        p3.setMinValue(l_min)\r\n        p3.setMaxValue(l_max)\r\n        p3.setDigitCount(n_digits, 3)\r\n\r\n        p4.setText('0')\r\n        p4.setFixedWidth(50)\r\n\r\n        self.pos_widget = p2\r\n        self.wheel = p3\r\n\r\n        # preset positions\r\n        preset_positions: List[float] = getattr(self, f'preset_pos_{dev_name}')\r\n        i = 1\r\n        setattr(self, f'radio_button_group_{dev_name}', Qt.QGroupBox('Preset Positions'))\r\n        group: Qt.QGroupBox = getattr(self, f'radio_button_group_{dev_name}')\r\n        for rb in [Qt.QRadioButton(text=str(pos)) for pos in preset_positions]:\r\n            setattr(self, f'rb{i}_{dev_name}', rb)\r\n            lo_preset.addWidget(rb)\r\n            rb.toggled.connect(partial(self.rb_clicked, rb.text(), dev_name))\r\n        group.setLayout(lo_preset)\r\n\r\n        # Info\r\n        widgets = [TaurusLabel(), TaurusLabel(), TaurusLabel(), TaurusLabel()]\r\n        i = 1\r\n        for inf in widgets:\r\n            name = f'inf{i}_{dev_name}'\r\n            setattr(self, f'{name}', inf)\r\n            i += 1\r\n        inf1 = getattr(self, f'inf1_{dev_name}')\r\n        inf2 = getattr(self, f'inf2_{dev_name}')\r\n        inf3 = getattr(self, f'inf3_{dev_name}')\r\n        inf4 = getattr(self, f'inf4_{dev_name}')\r\n\r\n        lo_info.addWidget(inf1)\r\n        lo_info.addWidget(inf2)\r\n        lo_info.addWidget(inf3)\r\n        # lo_info.addWidget(inf4)\r\n\r\n        inf1.model = f'{dev_name}/temperature'\r\n        inf2.model = f'{dev_name}/power_current'\r\n        inf3.model = f'{dev_name}/power_voltage'\r\n        # inf4.model = f'{dev_name}/power_status'\r\n\r\n        # # ERRORS and INFO\r\n        # error = TaurusLabel()\r\n        # comments = TaurusLabel()\r\n        # error.model = f'{dev_name}/last_error'\r\n        # comments.model = f'{dev_name}/last_comments'\r\n        # lo_error_info.addWidget(error)\r\n        # lo_error_info.addWidget(comments)\r\n\r\n        # Buttons and commands\r\n        setattr(self, f'button_on_{dev_name}', TaurusCommandButton(command='turn_on'))\r\n        button_on: TaurusCommandButton = getattr(self, f'button_on_{dev_name}')\r\n        button_on.setModel(dev_name)\r\n\r\n        setattr(self, f'button_stop_{dev_name}', TaurusCommandButton(command='stop_movement'))\r\n        button_stop: TaurusCommandButton = getattr(self, f'button_stop_{dev_name}')\r\n        button_stop.setModel(dev_name)\r\n\r\n        setattr(self, f'button_off_{dev_name}', TaurusCommandButton(command='turn_off'))\r\n        button_off: TaurusCommandButton = getattr(self, f'button_off_{dev_name}')\r\n        button_off.setModel(dev_name)\r\n\r\n        setattr(self, f'button_set_{dev_name}', QtWidgets.QPushButton('Set'))\r\n        button_set: TaurusCommandButton = getattr(self, f'button_set_{dev_name}')\r\n\r\n        setattr(self, f'button_init_{dev_name}', QtWidgets.QPushButton('init_device'))\r\n        button_init: TaurusCommandButton = getattr(self, f'button_init_{dev_name}')\r\n\r\n        # button_set.setModel(dev_name)\r\n        # button_set.setParameters([0])\r\n        button_set.clicked.connect(partial(self.set_clicked, dev_name))\r\n\r\n        lo_buttons.addWidget(button_on)\r\n        lo_buttons.addWidget(button_off)\r\n        lo_buttons.addWidget(button_stop)\r\n        lo_buttons.addWidget(button_set)\r\n        lo_buttons.addWidget(button_init)\r\n\r\n        separator = Qt.QFrame()\r\n        separator.setFrameShape(Qt.QFrame.VLine)\r\n        separator.setSizePolicy(Qt.QSizePolicy.Minimum, Qt.QSizePolicy.Expanding)\r\n        separator.setLineWidth(2)\r\n\r\n        lo_device.addLayout(lo_status)\r\n        lo_device.addLayout(lo_pos)\r\n        lo_device.addWidget(group)\r\n        lo_device.addLayout(lo_info)\r\n        lo_device.addLayout(lo_error_info)\r\n        lo_device.addLayout(lo_buttons)\r\n\r\n        lo_group.addLayout(lo_device)\r\n        lo_group.addWidget(separator)\r\n\r\n    def register_DS_min(self, dev_name, group_number=1):\r\n        super(Standa_motor, self).register_DS_min(dev_name, group_number=1)\r\n\r\n        ds: Device = getattr(self, f'ds_{self.dev_name}')\r\n\r\n        lo_group: Qt.QHBoxLayout = getattr(self, f'lo_group_{group_number}')\r\n        unit = ds.get_property('unit')['unit'][0]\r\n        setattr(self, f'l_min_{dev_name}', float(ds.get_property('limit_min')['limit_min'][0]))\r\n        setattr(self, f'l_max_{dev_name}', float(ds.get_property('limit_max')['limit_max'][0]))\r\n        setattr(self, f'name_{dev_name}', ds.get_property('friendly_name')['friendly_name'][0])\r\n        setattr(self, f'preset_pos_{dev_name}',\r\n                list([float(pos) for pos in ds.get_property('preset_pos')['preset_pos']]))\r\n        l_min, l_max = getattr(self, f'l_min_{dev_name}'), getattr(self, f'l_max_{dev_name}')\r\n        name = getattr(self, f'name_{dev_name}')\r\n\r\n        lo_device: Qt.QLayout = getattr(self, f'layout_main_{dev_name}')\r\n        lo_min: Qt.QLayout = getattr(self, f'layout_min_{dev_name}')\r\n        lo_buttons: Qt.QLayout = getattr(self, f'layout_buttons_{dev_name}')\r\n\r\n        # State and status\r\n        self.set_state_status()\r\n\r\n        # Position controls\r\n        widgets = [TaurusLabel(), TaurusLabel(), TaurusWheelEdit(), MyQLabel(f'Relative shift: {self.relative_shift}')]\r\n        i = 1\r\n        for p in widgets:\r\n            name = f'p{i}_{dev_name}'\r\n            setattr(self, f'{name}', p)\r\n            i += 1\r\n        p1: TaurusLabel = getattr(self, f'p1_{dev_name}')\r\n        p2: TaurusLabel = getattr(self, f'p2_{dev_name}')\r\n        p3: TaurusWheelEdit = getattr(self, f'p3_{dev_name}')\r\n        p4: MyQLabel = getattr(self, f'p{4}_{dev_name}')\r\n\r\n        p4.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)\r\n        p4.customContextMenuRequested.connect(partial(self.context_menu))\r\n\r\n        limit = abs(l_min) if abs(l_min) >= abs(l_max) else abs(l_max)\r\n        n_digits = len(str(int(limit)))\r\n\r\n        lo_min.addWidget(p1)\r\n        lo_min.addWidget(p2)\r\n        lo_min.addWidget(p3)\r\n\r\n        p1.setText(unit)\r\n        p2.model = f'{dev_name}/position'\r\n        p2.setFixedWidth(100)\r\n        p3.model = f'{dev_name}/position'\r\n\r\n        p3.setMinValue(l_min)\r\n        p3.setMaxValue(l_max)\r\n        p3.setDigitCount(n_digits, 3)\r\n\r\n        self.pos_widget = p2\r\n        self.wheel = p3\r\n\r\n        # preset positions\r\n        preset_positions: List[float] = getattr(self, f'preset_pos_{dev_name}')\r\n        preset_positions_cb = QtWidgets.QComboBox()\r\n        setattr(self, f'combobox_prepos_{dev_name}', preset_positions_cb)\r\n        for pr_pos in preset_positions:\r\n            preset_positions_cb.addItem(str(pr_pos))\r\n\r\n        preset_positions_cb.currentIndexChanged.connect(self.combobox_selected)\r\n\r\n        lo_min.addWidget(preset_positions_cb)\r\n        # Buttons and commands\r\n        setattr(self, f'button_left_{dev_name}', QtWidgets.QPushButton('<<'))\r\n        button_left: TaurusCommandButton = getattr(self, f'button_left_{dev_name}')\r\n\r\n        setattr(self, f'button_right_{dev_name}', QtWidgets.QPushButton('>>'))\r\n        button_right: TaurusCommandButton = getattr(self, f'button_right_{dev_name}')\r\n\r\n        button_left.clicked.connect(partial(self.move_button_clicked, -1))\r\n        button_right.clicked.connect(partial(self.move_button_clicked, 1))\r\n\r\n        setattr(self, f'p{5}_{dev_name}', MyQLabel(f'Relative shift: {self.relative_shift}'))\r\n        p5: MyQLabel = getattr(self, f'p{5}_{dev_name}')\r\n\r\n        p5.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)\r\n        p5.customContextMenuRequested.connect(partial(self.context_menu))\r\n\r\n        lo_buttons.addWidget(button_left)\r\n        lo_buttons.addWidget(p5)\r\n        lo_buttons.addWidget(button_right)\r\n\r\n        separator = Qt.QFrame()\r\n        separator.setFrameShape(Qt.QFrame.VLine)\r\n        separator.setSizePolicy(Qt.QSizePolicy.Minimum, Qt.QSizePolicy.Expanding)\r\n        separator.setLineWidth(2)\r\n\r\n        lo_device.addLayout(lo_min)\r\n        lo_device.addLayout(lo_buttons)\r\n\r\n        lo_group.addLayout(lo_device)\r\n        lo_group.addWidget(separator)\r\n\r\n    def combobox_selected(self):\r\n        cb: QtWidgets.QComboBox = getattr(self, f'combobox_prepos_{self.dev_name}')\r\n        pos = float(cb.currentText())\r\n        ds: Device = getattr(self, f'ds_{self.dev_name}')\r\n        p3: TaurusWheelEdit = getattr(self, f'p3_{self.dev_name}')\r\n        p3.setValue(pos)\r\n        ds.move_axis_abs(pos)\r\n\r\n    def move_button_clicked(self, direction: int):\r\n        relative_move = self.relative_shift * direction\r\n        pos = self.ds.position + relative_move\r\n        self.ds.move_axis_abs(pos)\r\n\r\n    def set_clicked(self, dev_name):\r\n        p: TaurusValueLineEdit = getattr(self, f'p4_{dev_name}')\r\n        try:\r\n            val = p.text()\r\n            val = float(val)\r\n        except (ValueError, TypeError):\r\n            val = 0\r\n            p.setText('0')\r\n        self.ds.define_position(val)\r\n\r\n    def rb_clicked(self, value: str, dev_name: str):\r\n        pos = float(value)\r\n        ds: Device = getattr(self, f'ds_{dev_name}')\r\n        p3: TaurusWheelEdit = getattr(self, f'p3_{dev_name}')\r\n        p3.setValue(pos)\r\n        ds.move_axis_abs(pos)\r\n\r\n    def mouseDoubleClickEvent(self, event: QMouseEvent):\r\n        print(f'{self.dev_name} is selected.')\r\n        self.setStyleSheet(\"background-color: lightgreen; border: 1px solid black;\")\r\n        self.panel_parent.active_widget = self.dev_name\r\n        self.panel_parent.update_background_widgets()\r\n\r\n    def context_menu(self, point):\r\n        menu = QtWidgets.QMenu()\r\n        tens = menu.addAction('0.1')\r\n        half = menu.addAction('0.5')\r\n        one = menu.addAction('1')\r\n        five = menu.addAction('5')\r\n        ten = menu.addAction('10')\r\n        fifty = menu.addAction('50')\r\n        hundred = menu.addAction('100')\r\n\r\n        label_shift: MyQLabel = getattr(self, f'p{5}_{self.dev_name}')\r\n\r\n        action = menu.exec_(label_shift.mapToGlobal(point))\r\n\r\n        if action:\r\n            move = 1\r\n            if action == tens:\r\n                move = 0.1\r\n            elif action == half:\r\n                move = 0.5\r\n            elif action == one:\r\n                move = 1\r\n            elif action == five:\r\n                move = 5\r\n            elif action == ten:\r\n                move = 10\r\n            elif action == fifty:\r\n                move = 50\r\n            elif action == hundred:\r\n                move = 100\r\n\r\n            self.relative_shift = move\r\n\r\n            label_shift.setText(f\"Relative shift: {move}\")
===================================================================
diff --git a/DeviceServers/STANDA/DS_STANDA_Widget.py b/DeviceServers/STANDA/DS_STANDA_Widget.py
--- a/DeviceServers/STANDA/DS_STANDA_Widget.py	
+++ b/DeviceServers/STANDA/DS_STANDA_Widget.py	
@@ -39,9 +39,9 @@
         setattr(self, f'layout_min_{self.dev_name}', Qt.QHBoxLayout())
         setattr(self, f'layout_buttons_{self.dev_name}', Qt.QHBoxLayout())
 
-    def register_DS_full(self, dev_name, group_number=1):
+    def register_DS_full(self, group_number=1):
         dev_name = self.dev_name
-        super(Standa_motor, self).register_DS_full(dev_name, group_number=1)
+        super(Standa_motor, self).register_DS_full(group_number=1)
 
         ds: Device = getattr(self, f'ds_{self.dev_name}')
 
@@ -192,8 +192,9 @@
         lo_group.addLayout(lo_device)
         lo_group.addWidget(separator)
 
-    def register_DS_min(self, dev_name, group_number=1):
-        super(Standa_motor, self).register_DS_min(dev_name, group_number=1)
+    def register_DS_min(self, group_number=1):
+        dev_name = self.dev_name
+        super(Standa_motor, self).register_DS_min(group_number=1)
 
         ds: Device = getattr(self, f'ds_{self.dev_name}')
 
